<?xml version="1.0" encoding="UTF-8"?>
<!--

-->
<xsl:stylesheet
	xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
	xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0"
	xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0"
	xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0"
	xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0"
	xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0"
	xmlns:presentation="urn:oasis:names:tc:opendocument:xmlns:presentation:1.0"
	xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0"
	xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0"
	xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0"
	xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0"
	xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0"
	xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0"
	xmlns:anim="urn:oasis:names:tc:opendocument:xmlns:animation:1.0"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:math="http://www.w3.org/1998/Math/MathML"
	xmlns:xforms="http://www.w3.org/2002/xforms"
	xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0"
	xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0"
	xmlns:smil="urn:oasis:names:tc:opendocument:xmlns:smil-compatible:1.0"
	xmlns:ooo="http://openoffice.org/2004/office"
	xmlns:ooow="http://openoffice.org/2004/writer"
	xmlns:oooc="http://openoffice.org/2004/calc"
	xmlns:int="http://opendocumentfellowship.org/internal"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	version="1.0">
	
	
	<!-- This section of the transformation handles lists. -->
	
	<xsl:key name="listTypes" match="text:list-style" use="@style:name"/>
    
    <!--Key for @style:list-style-name associations-->    
    <xsl:key name="listStyleNames" match="style:style" use="@style:list-style-name" mode="CSS-attr"/>
    
	<xsl:template match="text:list-style">
		
		<xsl:if test="$CSS.debug=1">
			<xsl:text>/* text:list-style '</xsl:text>
			<xsl:value-of select="@style:name"/>
			<xsl:text>' begin */</xsl:text>
			<xsl:value-of select="$linebreak"/>
        </xsl:if>
        <!--Reset Variable to save temporary margin values of @text:space-before template -->
        <xsl:variable name="precMarginLeft" select="'0pt'"/>

		<xsl:apply-templates select="@*" mode="CSS-attr"/>
		<xsl:apply-templates/>
		
		<xsl:if test="$CSS.debug=1">
			<xsl:text>/* text:list-style '</xsl:text>
			<xsl:value-of select="@style:name"/>
			<xsl:text>' end */</xsl:text>
			<xsl:value-of select="$linebreak"/>
		</xsl:if>
		
	</xsl:template>
	
	
	<xsl:template match="text:list-level-style-bullet|text:list-level-style-number">
		
		<xsl:variable name="node" select="name()"/>
		<xsl:variable name="style-name" select="@text:style-name|../@style:name"/>
		
		<xsl:if test="$CSS.debug=1">
			<xsl:text>/* </xsl:text>
			<xsl:value-of select="$node"/>
			<xsl:text> '</xsl:text>
			<xsl:value-of select="$style-name"/>
			<xsl:text>' begin */</xsl:text>
			<xsl:value-of select="$linebreak"/>
		</xsl:if>
		
		<xsl:value-of select="$linebreak"/>
		<xsl:text>.list_</xsl:text>
		<xsl:value-of select="translate($style-name,'.','_')"/>
		<xsl:text>_</xsl:text>
		<xsl:value-of select="@text:level"/>
		<xsl:value-of select="$linebreak"/>
		<xsl:text>{</xsl:text>
		
		<xsl:apply-templates select="@*" mode="CSS-attr"/>
        <xsl:apply-templates/>
		
		<xsl:text>}</xsl:text>
        <xsl:value-of select="$linebreak"/>                                           
		
		<xsl:if test="$CSS.debug=1">
			<xsl:text>/* </xsl:text>
			<xsl:value-of select="$node"/>
			<xsl:text> '</xsl:text>
			<xsl:value-of select="$style-name"/>
			<xsl:text>' end */</xsl:text>
			<xsl:value-of select="$linebreak"/>
        </xsl:if>

	</xsl:template>
	
	
	<xsl:template match="text:list-level-style-bullet/@text:level" mode="CSS-attr">
		<xsl:text>list-style-type: </xsl:text>
			<xsl:choose>
				<xsl:when test=". mod 3 = 1">disc</xsl:when>
				<xsl:when test=". mod 3 = 2">circle</xsl:when>
				<xsl:when test=". mod 3 = 0">square</xsl:when>
				<xsl:otherwise>disc</xsl:otherwise>
            </xsl:choose>
		<xsl:text>; </xsl:text>
    </xsl:template>
	
	
	<xsl:template match="text:list-level-style-number/@text:level" mode="CSS-attr">
		<xsl:text>list-style-type: </xsl:text>
			<xsl:choose>
                <xsl:when test="../@style:num-format='1'">decimal</xsl:when>
                <xsl:when test="../@style:num-format='I'">upper-roman</xsl:when>
                <xsl:when test="../@style:num-format='i'">lower-roman</xsl:when>
                <xsl:when test="../@style:num-format='A'">upper-alpha</xsl:when>
                <xsl:when test="../@style:num-format='a'">lower-alpha</xsl:when>
				<xsl:otherwise>decimal</xsl:otherwise>
			</xsl:choose>
		<xsl:text>; </xsl:text>
	</xsl:template>

    <xsl:template match="@text:space-before" mode="CSS-attr">
        
        <!--Get margin-left length of preceding list level and compute current length
            !There is no proper output with  --> 
        <xsl:variable name="level" select="../../@text:level"/>
        <xsl:variable name="precedingLength" 
            select="../../../*[@text:level=$level - 1]/style:list-level-properties/@text:space-before"/>
        <xsl:variable name="length">
            <xsl:choose>
                <xsl:when test="$precedingLength">
                    <xsl:call-template name="subtracted-length-values" mode="CSS-attr">
                            <xsl:with-param name="length-1" select="."/>
                            <xsl:with-param name="length-2" select="$precedingLength"/>
                    </xsl:call-template>    
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="."/>
                </xsl:otherwise>     
            </xsl:choose>
        </xsl:variable>
        
        <!--Get margin-left length of associated style:style element-->
        <xsl:variable name="styleName" select="../../../@style:name"/>
		<xsl:variable name="node" select="key('listStyleNames',$styleName)"/>
        <xsl:variable name="length-2" select="$node/style:paragraph-properties/@fo:margin-left"/> 

        <xsl:text>margin-left:</xsl:text>
        <xsl:choose>
            <!-- If there is an associated style:style element we add whoses fo:margin-left length
                 (spec 15.2). !There is no proper output with multiple associated elements.-->
            <xsl:when test="$length-2">
                <xsl:variable name="length_">
                    <xsl:call-template name="added-length-values" mode="CSS-attr">
                        <xsl:with-param name="length-1" select="$length"/>
                        <xsl:with-param name="length-2" select="$length-2"/>
                    </xsl:call-template>
                </xsl:variable>
                <xsl:call-template name="normalized-value" mode="CSS-attr">
                    <xsl:with-param name="length" select="$length_"/>
                </xsl:call-template>
            </xsl:when>
            <!--Otherwise not-->
            <xsl:otherwise>
                <xsl:call-template name="normalized-value" mode="CSS-attr">
                    <xsl:with-param name="length" select="$length"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>

	</xsl:template>
	
    <xsl:template  match="style:list-level-properties">
        
        <xsl:if test="$CSS.debug=1">
            <xsl:text>/* style:list-level-properties begin */'</xsl:text>
			<xsl:value-of select="$linebreak"/>
		</xsl:if>
		
		<xsl:apply-templates select="@*" mode="CSS-attr"/>
		
		<xsl:if test="$CSS.debug=1">
            <xsl:text>/* style:list-level-properties end */'</xsl:text>
			<xsl:value-of select="$linebreak"/>
		</xsl:if>                      

    </xsl:template>


	<!--
		When processing a list, you have to look at the parent style
		*and* level of nesting
	-->
	
	
	<xsl:template match="text:list">
		<xsl:variable name="level" select="count(ancestor::text:list)+1"/>
		<!--
			the list class is the @text:style-name of the outermost
			<text:list> element
		-->
		<xsl:variable name="listClass">
			<xsl:choose>
				<xsl:when test="$level=1">
					<xsl:value-of select="@text:style-name"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="ancestor::text:list[last()]/@text:style-name"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<!--
			Now select the <text:list-level-style-foo> element at this
			level of nesting for this list
		-->
		<xsl:variable
			name="node"
			select="key('listTypes',$listClass)/*[@text:level='$level']"/>
		<!-- emit appropriate list type -->
		<xsl:choose>
			<xsl:when test="local-name($node)='list-level-style-number'">
				<ol class="list_{concat($listClass,'_',$level)}">
					<xsl:apply-templates/>
				</ol>
			</xsl:when>
			<xsl:otherwise>
				<ul class="list_{concat($listClass,'_',$level)}">
					<xsl:apply-templates/>
				</ul>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	
	<xsl:template match="text:list-item">
		<li>
			<xsl:apply-templates/>
		</li>
	</xsl:template>
	
	
</xsl:stylesheet>

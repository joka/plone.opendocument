
Tests for opendocument_html_xslt transform


First we test that it fullfills the ITransform interface: 
    
   >>> from plone.transforms.interfaces import ITransform
   >>> from plone.opendocument.opendocument_html_xslt import OpendocumentHtmlXsltTransform
   >>> from zope.interface.verify import verifyClass
   >>> verifyClass(ITransform, OpendocumentHtmlXsltTransform)
   True     

Then we register and create the transform:

    >>> from zope.configuration.xmlconfig import XMLConfig
    >>> import plone.opendocument
    >>> from zope.component import queryUtility
    >>> XMLConfig('configure.zcml', plone.opendocument)()
    >>> util = queryUtility(ITransform,
    ...    name='plone.opendocument.opendocument_html_xslt.OpendocumentHtmlXsltTransform')
    >>> util
    <plone.opendocument.opendocument_html_xslt.OpendocumentHtmlXsltTransform object at ...>

A test file is not bad:

    >>> import os
    >>> dataPath = os.path.join(os.path.dirname(__file__), 'tests/input/test.odt')
    >>> data = file(dataPath)
    >>> type(data)
    <type 'file'>

Now we can do an opendocument_html_xslt transform:

    >>> result = util.transform(data)
    >>> data.close()

To check the reslult we need some imports to handle files:

    >>> import shutil 
    >>> import PIL.Image 

Now we can check result.data
    
    >>> outputDir = os.path.join(os.path.dirname(__file__), 'tests/output')
    >>> outputFilePath = os.path.join(outputDir, 'test_odt.html')
    >>> outputFile = file(outputFilePath, 'w+b')
    >>> shutil.copyfileobj(result.data, outputFile)
    >>> outputFile.close()
    >>> result.data.close()
    >>> testFilePath = os.path.join(outputDir, 'test_odtOLD.html')
    >>> os.path.getsize(testFilePath) == os.path.getsize(outputFilePath)
    True

and result.subobjects

    >>> imageName = '100000000000005A00000014A13E146C.png'
    >>> imageContent = result.subobjects[imageName]
    >>> outputFilePath = os.path.join(outputDir, imageName)
    >>> outputFile = file(outputFilePath, 'w+b')
    >>> shutil.copyfileobj(imageContent, outputFile)
    >>> outputFile.close()
    >>> imageContent.close()
    >>> pic1 = PIL.Image.open(os.path.join(outputDir,'100000000000005A00000014A13E146C.png'))
    >>> pic1.format == 'PNG'
    True

and result.metadata
    
    >>> result.metadata
    {u'meta:generator': u'OpenOffice.org/2.2$Linux OpenOffice.org_project/680m18$Build-9161', u'dc:language': u'en-US', u'meta:image-count': u'1', u'meta:object-count': u'1', u'meta:word-count': u'210', u'meta:page-count': u'3', u'meta:editing-cycles': u'1', u'meta:editing-duration': u'PT0S', u'meta:character-count': u'1237', u'meta:paragraph-count': u'77', u'meta:table-count': u'4'}




and result.errors

    >>> result.errors
    u"\n                                 Image file or OLE Object 'Object 1' does not exist. Maybe it is                                 not embedded in OpenDocument file?\n                                 "







